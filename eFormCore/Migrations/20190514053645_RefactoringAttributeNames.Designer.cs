/*
The MIT License (MIT)

Copyright (c) 2007 - 2025 Microting A/S

Permission is hereby granted, free of charge, to any person obtaining a copy
of this software and associated documentation files (the "Software"), to deal
in the Software without restriction, including without limitation the rights
to use, copy, modify, merge, publish, distribute, sublicense, and/or sell
copies of the Software, and to permit persons to whom the Software is
furnished to do so, subject to the following conditions:

The above copyright notice and this permission notice shall be included in all
copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,
OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE
SOFTWARE.
*/

// <auto-generated />

using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microting.eForm.Infrastructure;

namespace Microting.eForm.Migrations
{
    [DbContext(typeof(MicrotingDbContext))]
    [Migration("20190514053645_RefactoringAttributeNames")]
    partial class RefactoringAttributeNames
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            string autoIDGenStrategy = "SqlServer:ValueGenerationStrategy";
            object autoIDGenStrategyValue = MySqlValueGenerationStrategy.IdentityColumn;
            if (DbConfig.IsMySQL)
            {
                autoIDGenStrategy = "MySql:ValueGenerationStrategy";
                autoIDGenStrategyValue = MySqlValueGenerationStrategy.IdentityColumn;
            }
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.4-servicing-10062")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

            modelBuilder.Entity("eFormSqlController.answer_value_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int>("AnswerId");

                    b.Property<int>("AnswerValueId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int>("OptionsId");

                    b.Property<int>("QuestionId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("Value");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("AnswerValueId");

                    b.ToTable("answer_value_versions");
                });

            modelBuilder.Entity("eFormSqlController.answer_values", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int>("AnswerId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int>("OptionsId");

                    b.Property<int>("QuestionId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int>("Value");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("AnswerId");

                    b.HasIndex("OptionsId");

                    b.HasIndex("QuestionId");

                    b.ToTable("answer_values");
                });

            modelBuilder.Entity("eFormSqlController.answer_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int>("AnswerDuration");

                    b.Property<int>("AnswerId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int>("FinishedAt");

                    b.Property<int>("QuestionSetId");

                    b.Property<int>("SiteId");

                    b.Property<int>("SurveyConfigurationId");

                    b.Property<string>("TimeZone");

                    b.Property<int>("UnitId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<bool>("UtcAdjusted");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.Property<int>("LanguageId");

                    b.HasKey("Id");

                    b.ToTable("answer_versions");
                });

            modelBuilder.Entity("eFormSqlController.answers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int>("AnswerDuration");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int>("FinishedAt");

                    b.Property<int>("LanguageId");

                    b.Property<int>("QuestionSetId");

                    b.Property<int>("SiteId");

                    b.Property<int>("SurveyConfigurationId");

                    b.Property<string>("TimeZone");

                    b.Property<int>("UnitId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<bool>("UtcAdjusted");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.HasIndex("QuestionSetId");

                    b.HasIndex("SiteId");

                    b.HasIndex("SurveyConfigurationId");

                    b.HasIndex("UnitId");

                    b.ToTable("answers");
                });

            modelBuilder.Entity("eFormSqlController.case_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int?>("CaseId");

                    b.Property<string>("CaseUid")
                        .HasMaxLength(255);

                    b.Property<int?>("CheckListId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Custom");

                    b.Property<DateTime?>("DoneAt");

                    b.Property<int?>("WorkerId");

                    b.Property<string>("FieldValue1");

                    b.Property<string>("FieldValue10");

                    b.Property<string>("FieldValue2");

                    b.Property<string>("FieldValue3");

                    b.Property<string>("FieldValue4");

                    b.Property<string>("FieldValue5");

                    b.Property<string>("FieldValue6");

                    b.Property<string>("FieldValue7");

                    b.Property<string>("FieldValue8");

                    b.Property<string>("FieldValue9");

                    b.Property<string>("MicrotingCheckUid")
                        .HasMaxLength(255);

                    b.Property<string>("MicrotingUid")
                        .HasMaxLength(255);

                    b.Property<int?>("SiteId");

                    b.Property<int?>("Status");

                    b.Property<string>("Type")
                        .HasMaxLength(255);

                    b.Property<int?>("UnitId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("case_versions");
                });

            modelBuilder.Entity("eFormSqlController.cases", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<string>("CaseUid")
                        .HasMaxLength(255);

                    b.Property<int?>("CheckListId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Custom");

                    b.Property<DateTime?>("DoneAt");

                    b.Property<int?>("WorkerId");

                    b.Property<string>("FieldValue1");

                    b.Property<string>("FieldValue10");

                    b.Property<string>("FieldValue2");

                    b.Property<string>("FieldValue3");

                    b.Property<string>("FieldValue4");

                    b.Property<string>("FieldValue5");

                    b.Property<string>("FieldValue6");

                    b.Property<string>("FieldValue7");

                    b.Property<string>("FieldValue8");

                    b.Property<string>("FieldValue9");

                    b.Property<string>("MicrotingCheckUid")
                        .HasMaxLength(255);

                    b.Property<string>("MicrotingUid")
                        .HasMaxLength(255);

                    b.Property<int?>("SiteId");

                    b.Property<int?>("Status");

                    b.Property<string>("Type")
                        .HasMaxLength(255);

                    b.Property<int?>("UnitId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<int?>("WorkerId");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CheckListId");

                    b.HasIndex("SiteId");

                    b.HasIndex("UnitId");

                    b.HasIndex("WorkerId");

                    b.ToTable("cases");
                });

            modelBuilder.Entity("eFormSqlController.check_list_site_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int?>("CheckListId");

                    b.Property<int?>("CheckListSiteId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("LastCheckId")
                        .HasMaxLength(255);

                    b.Property<string>("MicrotingUid")
                        .HasMaxLength(255);

                    b.Property<int?>("SiteId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("check_list_site_versions");
                });

            modelBuilder.Entity("eFormSqlController.check_list_sites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int?>("CheckListId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("LastCheckId")
                        .HasMaxLength(255);

                    b.Property<string>("MicrotingUid")
                        .HasMaxLength(255);

                    b.Property<int?>("SiteId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CheckListId");

                    b.HasIndex("SiteId");

                    b.ToTable("check_list_sites");
                });

            modelBuilder.Entity("eFormSqlController.check_list_value_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int?>("CaseId");

                    b.Property<int?>("CheckListDuplicateId");

                    b.Property<int?>("CheckListId");

                    b.Property<int?>("CheckListValueId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Status")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("UserId");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("check_list_value_versions");
                });

            modelBuilder.Entity("eFormSqlController.check_list_values", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int?>("CaseId");

                    b.Property<int?>("CheckListDuplicateId");

                    b.Property<int?>("CheckListId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Status")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("UserId");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("check_list_values");
                });

            modelBuilder.Entity("eFormSqlController.check_list_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<short?>("ApprovalEnabled");

                    b.Property<string>("CaseType")
                        .HasMaxLength(255);

                    b.Property<int?>("CheckListId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Custom");

                    b.Property<string>("Description");

                    b.Property<int?>("DisplayIndex");

                    b.Property<short?>("DoneButtonEnabled");

                    b.Property<short?>("DownloadEntities");

                    b.Property<short?>("ExtraFieldsEnabled");

                    b.Property<short?>("FastNavigation");

                    b.Property<int?>("Field1");

                    b.Property<int?>("Field10");

                    b.Property<int?>("Field2");

                    b.Property<int?>("Field3");

                    b.Property<int?>("Field4");

                    b.Property<int?>("Field5");

                    b.Property<int?>("Field6");

                    b.Property<int?>("Field7");

                    b.Property<int?>("Field8");

                    b.Property<int?>("Field9");

                    b.Property<string>("FolderName")
                        .HasMaxLength(255);

                    b.Property<string>("Label");

                    b.Property<short?>("ManualSync");

                    b.Property<short?>("MultiApproval");

                    b.Property<string>("OriginalId");

                    b.Property<int?>("ParentId");

                    b.Property<short?>("QuickSyncEnabled");

                    b.Property<int?>("Repeated");

                    b.Property<short?>("ReviewEnabled");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("check_list_versions");
                });

            modelBuilder.Entity("eFormSqlController.check_lists", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<short?>("ApprovalEnabled");

                    b.Property<string>("CaseType")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Custom");

                    b.Property<string>("Description");

                    b.Property<int?>("DisplayIndex");

                    b.Property<short?>("DoneButtonEnabled");

                    b.Property<short?>("DownloadEntities");

                    b.Property<short?>("ExtraFieldsEnabled");

                    b.Property<short?>("FastNavigation");

                    b.Property<int?>("Field1");

                    b.Property<int?>("Field10");

                    b.Property<int?>("Field2");

                    b.Property<int?>("Field3");

                    b.Property<int?>("Field4");

                    b.Property<int?>("Field5");

                    b.Property<int?>("Field6");

                    b.Property<int?>("Field7");

                    b.Property<int?>("Field8");

                    b.Property<int?>("Field9");

                    b.Property<string>("FolderName")
                        .HasMaxLength(255);

                    b.Property<string>("Label");

                    b.Property<short?>("ManualSync");

                    b.Property<short?>("MultiApproval");

                    b.Property<string>("OriginalId");

                    b.Property<int?>("ParentId");

                    b.Property<short?>("QuickSyncEnabled");

                    b.Property<int?>("Repeated");

                    b.Property<short?>("ReviewEnabled");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("check_lists");
                });

            modelBuilder.Entity("eFormSqlController.entity_group_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int>("EntityGroupId");

                    b.Property<string>("MicrotingUid");

                    b.Property<string>("Name");

                    b.Property<string>("Type")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("entity_group_versions");
                });

            modelBuilder.Entity("eFormSqlController.entity_groups", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("MicrotingUid");

                    b.Property<string>("Name");

                    b.Property<string>("Type")
                        .HasMaxLength(50);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("entity_groups");
                });

            modelBuilder.Entity("eFormSqlController.entity_item_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayIndex");

                    b.Property<int?>("EntityGroupId");

                    b.Property<string>("EntityItemUid")
                        .HasMaxLength(50);

                    b.Property<int>("EntityItemsId");

                    b.Property<string>("MicrotingUid");

                    b.Property<string>("Name");

                    b.Property<short?>("Synced");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("entity_item_versions");
                });

            modelBuilder.Entity("eFormSqlController.entity_items", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("DisplayIndex");

                    b.Property<int>("EntityGroupId");

                    b.Property<string>("EntityItemUid")
                        .HasMaxLength(50);

                    b.Property<string>("MicrotingUid");

                    b.Property<string>("Name");

                    b.Property<short?>("Synced");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("entity_items");
                });

            modelBuilder.Entity("eFormSqlController.field_types", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<string>("Description")
                        .HasMaxLength(255);

                    b.Property<string>("FieldType")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("field_types");
                });

            modelBuilder.Entity("eFormSqlController.field_value_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<string>("Accuracy")
                        .HasMaxLength(255);

                    b.Property<string>("Altitude")
                        .HasMaxLength(255);

                    b.Property<int?>("CaseId");

                    b.Property<int?>("CheckListDuplicateId");

                    b.Property<int?>("CheckListId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("Date");

                    b.Property<DateTime?>("DoneAt");

                    b.Property<int?>("FieldId");

                    b.Property<int?>("FieldValueId");

                    b.Property<string>("Heading")
                        .HasMaxLength(255);

                    b.Property<string>("Latitude")
                        .HasMaxLength(255);

                    b.Property<string>("Longitude")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("UploadedDataId");

                    b.Property<int?>("UserId");

                    b.Property<string>("Value");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("field_value_versions");
                });

            modelBuilder.Entity("eFormSqlController.field_values", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.Property<string>("accuracy")
                        .HasMaxLength(255);

                    b.Property<string>("altitude")
                        .HasMaxLength(255);

                    b.Property<int?>("case_id");

                    b.Property<int?>("check_list_duplicate_id");

                    b.Property<int?>("check_list_id");

                    b.Property<DateTime?>("date");

                    b.Property<DateTime?>("done_at");

                    b.Property<int?>("field_id");

                    b.Property<string>("heading")
                        .HasMaxLength(255);

                    b.Property<string>("latitude")
                        .HasMaxLength(255);

                    b.Property<string>("longitude")
                        .HasMaxLength(255);

                    b.Property<int?>("uploaded_data_id");

                    b.Property<int?>("user_id");

                    b.Property<string>("value");

                    b.HasKey("Id");

                    b.HasIndex("check_list_id");

                    b.HasIndex("field_id");

                    b.HasIndex("uploaded_data_id");

                    b.HasIndex("user_id");

                    b.ToTable("field_values");
                });

            modelBuilder.Entity("eFormSqlController.field_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<short?>("BarcodeEnabled");

                    b.Property<string>("BarcodeType")
                        .HasMaxLength(255);

                    b.Property<int?>("CheckListId");

                    b.Property<string>("Color")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Custom");

                    b.Property<int?>("DecimalCount");

                    b.Property<string>("DefaultValue");

                    b.Property<string>("Description");

                    b.Property<int?>("DisplayIndex");

                    b.Property<short?>("Dummy");

                    b.Property<int?>("EntityGroupId");

                    b.Property<int?>("FieldId");

                    b.Property<int?>("FieldTypeId");

                    b.Property<short?>("GeolocationEnabled");

                    b.Property<short?>("GeolocationForced");

                    b.Property<short?>("GeolocationHidden");

                    b.Property<short?>("IsNum");

                    b.Property<string>("KeyValuePairList");

                    b.Property<string>("Label");

                    b.Property<short?>("Mandatory");

                    b.Property<int?>("MaxLength");

                    b.Property<string>("MaxValue")
                        .HasMaxLength(255);

                    b.Property<string>("MinValue")
                        .HasMaxLength(255);

                    b.Property<int?>("Multi");

                    b.Property<short?>("Optional");

                    b.Property<string>("OriginalId");

                    b.Property<int?>("ParentFieldId");

                    b.Property<string>("QueryType")
                        .HasMaxLength(255);

                    b.Property<short?>("ReadOnly");

                    b.Property<short?>("Selected");

                    b.Property<short?>("SplitScreen");

                    b.Property<short?>("StopOnSave");

                    b.Property<string>("UnitName")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("field_versions");
                });

            modelBuilder.Entity("eFormSqlController.fields", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<short?>("BarcodeEnabled");

                    b.Property<string>("BarcodeType")
                        .HasMaxLength(255);

                    b.Property<int?>("CheckListId");

                    b.Property<string>("Color")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Custom");

                    b.Property<int?>("DecimalCount");

                    b.Property<string>("DefaultValue");

                    b.Property<string>("Description");

                    b.Property<int?>("DisplayIndex");

                    b.Property<short?>("Dummy");

                    b.Property<int?>("EntityGroupId");

                    b.Property<int?>("FieldTypeId");

                    b.Property<short?>("GeolocationEnabled");

                    b.Property<short?>("GeolocationForced");

                    b.Property<short?>("GeolocationHidden");

                    b.Property<short?>("IsNum");

                    b.Property<string>("KeyValuePairList");

                    b.Property<string>("Label");

                    b.Property<short?>("Mandatory");

                    b.Property<int?>("MaxLength");

                    b.Property<string>("MaxValue")
                        .HasMaxLength(255);

                    b.Property<string>("MinValue")
                        .HasMaxLength(255);

                    b.Property<int?>("Multi");

                    b.Property<short?>("Optional");

                    b.Property<string>("OriginalId");

                    b.Property<int?>("ParentFieldId");

                    b.Property<string>("QueryType")
                        .HasMaxLength(255);

                    b.Property<short?>("ReadOnly");

                    b.Property<short?>("Selected");

                    b.Property<short?>("SplitScreen");

                    b.Property<short?>("StopOnSave");

                    b.Property<string>("UnitName")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CheckListId");

                    b.HasIndex("FieldTypeId");

                    b.HasIndex("ParentFieldId");

                    b.ToTable("fields");
                });

            modelBuilder.Entity("eFormSqlController.folder_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int?>("FolderId");

                    b.Property<int?>("MicrotingUid");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("folder_versions");
                });

            modelBuilder.Entity("eFormSqlController.folders", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int?>("MicrotingUid");

                    b.Property<string>("Name");

                    b.Property<int?>("ParentId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("ParentId");

                    b.ToTable("folders");
                });

            modelBuilder.Entity("eFormSqlController.language_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<int>("LanguageId");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("LanguageId");

                    b.ToTable("language_versions");
                });

            modelBuilder.Entity("eFormSqlController.languages", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Description");

                    b.Property<string>("Name");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("languages");
                });

            modelBuilder.Entity("eFormSqlController.log_exceptions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Level");

                    b.Property<string>("Message");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("log_exceptions");
                });

            modelBuilder.Entity("eFormSqlController.logs", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime>("CreatedAt");

                    b.Property<int>("Level");

                    b.Property<string>("Message");

                    b.Property<string>("Type");

                    b.HasKey("Id");

                    b.ToTable("logs");
                });

            modelBuilder.Entity("eFormSqlController.notifications", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<string>("Activity");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Exception");

                    b.Property<string>("MicrotingUid")
                        .HasMaxLength(255);

                    b.Property<string>("NotificationUid")
                        .HasMaxLength(255);

                    b.Property<string>("Stacktrace");

                    b.Property<string>("Transmission");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("eFormSqlController.option_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int>("ContinuousOptionId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int>("NextQuestionId");

                    b.Property<int>("OptionId");

                    b.Property<int>("OptionsIndex");

                    b.Property<int>("QuestionId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<int>("Weight");

                    b.Property<int>("WeightValue");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("OptionId");

                    b.ToTable("option_versions");
                });

            modelBuilder.Entity("eFormSqlController.options", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int>("ContinuousOptionId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int>("NextQuestionId");

                    b.Property<int>("OptionsIndex");

                    b.Property<int>("QuestionId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<int>("Weight");

                    b.Property<int>("WeightValue");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("options");
                });

            modelBuilder.Entity("eFormSqlController.question_set_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool>("HasChild");

                    b.Property<string>("Name");

                    b.Property<int>("ParentId");

                    b.Property<bool>("PossiblyDeployed");

                    b.Property<int>("QuestionSetId");

                    b.Property<bool>("Share");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("QuestionSetId");

                    b.ToTable("question_set_versions");
                });

            modelBuilder.Entity("eFormSqlController.question_sets", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<bool>("HasChild");

                    b.Property<string>("Name");

                    b.Property<int>("ParentId");

                    b.Property<bool>("PosiblyDeployed");

                    b.Property<bool>("Share");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("question_sets");
                });

            modelBuilder.Entity("eFormSqlController.question_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<bool>("BackButtonEnabled");

                    b.Property<int>("ContinuousQuestionId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("FontSize");

                    b.Property<bool>("Image");

                    b.Property<string>("ImagePosition");

                    b.Property<int>("MaxDuration");

                    b.Property<int>("Maximum");

                    b.Property<int>("MinDuration");

                    b.Property<int>("Minimum");

                    b.Property<bool>("Prioritised");

                    b.Property<int>("QuestionId");

                    b.Property<int>("QuestionIndex");

                    b.Property<int>("QuestionSetId");

                    b.Property<string>("QuestionType");

                    b.Property<int>("RefId");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<bool>("ValidDisplay");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("question_versions");
                });

            modelBuilder.Entity("eFormSqlController.questions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<bool>("BackButtonEnabled");

                    b.Property<int>("ContinuousQuestionId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("FontSize");

                    b.Property<bool>("Image");

                    b.Property<string>("ImagePosition");

                    b.Property<int>("MaxDuration");

                    b.Property<int>("Maximum");

                    b.Property<int>("MinDuration");

                    b.Property<int>("Minimum");

                    b.Property<bool>("Prioritised");

                    b.Property<int>("QuestionIndex");

                    b.Property<int>("QuestionSetId");

                    b.Property<string>("QuestionType");

                    b.Property<int>("RefId");

                    b.Property<string>("Type");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<bool>("ValidDisplay");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("QuestionSetId");

                    b.ToTable("questions");
                });

            modelBuilder.Entity("eFormSqlController.settings", b =>
                {
                    b.Property<int>("Id");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50);

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("settings");
                });

            modelBuilder.Entity("eFormSqlController.site_survey_configuration_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int>("SiteId");

                    b.Property<int>("SiteSurveyConfigurationId");

                    b.Property<int>("SurveyConfigurationId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("SiteSurveyConfigurationId");

                    b.ToTable("site_survey_configuration_versions");
                });

            modelBuilder.Entity("eFormSqlController.site_survey_configurations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int>("SiteId");

                    b.Property<int>("SurveyConfigurationId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("SurveyConfigurationId");

                    b.ToTable("site_survey_configurations");
                });

            modelBuilder.Entity("eFormSqlController.site_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("MicrotingUid");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<int?>("SiteId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("site_versions");
                });

            modelBuilder.Entity("eFormSqlController.site_worker_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("MicrotingUid");

                    b.Property<int?>("SiteId");

                    b.Property<int?>("SiteWorkerId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<int?>("WorkerId");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("site_worker_versions");
                });

            modelBuilder.Entity("eFormSqlController.site_workers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("MicrotingUid");

                    b.Property<int?>("SiteId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<int?>("WorkerId");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.HasIndex("WorkerId");

                    b.ToTable("site_workers");
                });

            modelBuilder.Entity("eFormSqlController.sites", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("MicrotingUid");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("sites");
                });

            modelBuilder.Entity("eFormSqlController.survey_configuration_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("Start");

                    b.Property<DateTime>("Stop");

                    b.Property<int>("SurveyConfigurationId");

                    b.Property<int>("TimeOut");

                    b.Property<int>("TimeToLive");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("SurveyConfigurationId");

                    b.ToTable("survey_configuration_versions");
                });

            modelBuilder.Entity("eFormSqlController.survey_configurations", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Name");

                    b.Property<DateTime>("Start");

                    b.Property<DateTime>("Stop");

                    b.Property<int>("TimeOut");

                    b.Property<int>("TimeToLive");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("survey_configurations");
                });

            modelBuilder.Entity("eFormSqlController.tag_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<int?>("TagId");

                    b.Property<int?>("TaggingsCount");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("tag_versions");
                });

            modelBuilder.Entity("eFormSqlController.tagging_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int?>("CheckListId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("TagId");

                    b.Property<int?>("TaggerId");

                    b.Property<int?>("TaggingId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("tagging_versions");
                });

            modelBuilder.Entity("eFormSqlController.taggings", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<int?>("CheckListId");

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("TagId");

                    b.Property<int?>("TaggerId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("CheckListId");

                    b.HasIndex("TagId");

                    b.ToTable("taggings");
                });

            modelBuilder.Entity("eFormSqlController.tags", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Name")
                        .HasMaxLength(255);

                    b.Property<int?>("TaggingsCount");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("tags");
                });

            modelBuilder.Entity("eFormSqlController.unit_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CustomerNo");

                    b.Property<int?>("MicrotingUid");

                    b.Property<int?>("OtpCode");

                    b.Property<int?>("SiteId");

                    b.Property<int?>("UnitId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("unit_versions");
                });

            modelBuilder.Entity("eFormSqlController.units", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<int?>("CustomerNo");

                    b.Property<int?>("MicrotingUid");

                    b.Property<int?>("OtpCode");

                    b.Property<int?>("SiteId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.HasIndex("SiteId");

                    b.ToTable("units");
                });

            modelBuilder.Entity("eFormSqlController.uploaded_data", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<string>("Checksum")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CurrentFile")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<string>("Extension")
                        .HasMaxLength(255);

                    b.Property<string>("FileLocation")
                        .HasMaxLength(255);

                    b.Property<string>("FileName")
                        .HasMaxLength(255);

                    b.Property<short?>("Local");

                    b.Property<int?>("TranscriptionId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("UploaderId");

                    b.Property<string>("UploaderType")
                        .HasMaxLength(255);

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("uploaded_data");
                });

            modelBuilder.Entity("eFormSqlController.uploaded_data_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<string>("Checksum")
                        .HasMaxLength(255);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("CurrentFile")
                        .HasMaxLength(255);

                    b.Property<int?>("DataUploadedId");

                    b.Property<DateTime?>("ExpirationDate");

                    b.Property<string>("Extension")
                        .HasMaxLength(255);

                    b.Property<string>("FileLocation")
                        .HasMaxLength(255);

                    b.Property<string>("FileName")
                        .HasMaxLength(255);

                    b.Property<short?>("Local");

                    b.Property<int?>("TranscriptionId");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("UploaderId");

                    b.Property<string>("UploaderType")
                        .HasMaxLength(255);

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("uploaded_data_versions");
                });

            modelBuilder.Entity("eFormSqlController.worker_versions", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .HasMaxLength(255);

                    b.Property<int>("MicrotingUid");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<int?>("WorkerId");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("worker_versions");
                });

            modelBuilder.Entity("eFormSqlController.workers", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation(autoIDGenStrategy, autoIDGenStrategyValue);

                    b.Property<DateTime?>("CreatedAt");

                    b.Property<string>("Email")
                        .HasMaxLength(255);

                    b.Property<string>("FirstName")
                        .HasMaxLength(255);

                    b.Property<string>("LastName")
                        .HasMaxLength(255);

                    b.Property<int>("MicrotingUid");

                    b.Property<DateTime?>("UpdatedAt");

                    b.Property<int?>("Version");

                    b.Property<string>("WorkflowState")
                        .HasMaxLength(255);

                    b.HasKey("Id");

                    b.ToTable("workers");
                });

            modelBuilder.Entity("eFormSqlController.answer_value_versions", b =>
                {
                    b.HasOne("eFormSqlController.answer_values", "AnswerValue")
                        .WithMany()
                        .HasForeignKey("AnswerValueId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eFormSqlController.answer_values", b =>
                {
                    b.HasOne("eFormSqlController.answers", "Answer")
                        .WithMany()
                        .HasForeignKey("AnswerId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eFormSqlController.options", "Option")
                        .WithMany()
                        .HasForeignKey("OptionsId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eFormSqlController.questions", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eFormSqlController.answers", b =>
                {
                    b.HasOne("eFormSqlController.languages", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eFormSqlController.question_sets", "QuestionSet")
                        .WithMany()
                        .HasForeignKey("QuestionSetId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eFormSqlController.sites", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eFormSqlController.survey_configurations", "SurveyConfiguration")
                        .WithMany()
                        .HasForeignKey("SurveyConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eFormSqlController.units", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eFormSqlController.cases", b =>
                {
                    b.HasOne("eFormSqlController.check_lists", "CheckList")
                        .WithMany("Cases")
                        .HasForeignKey("CheckListId");

                    b.HasOne("eFormSqlController.sites", "Site")
                        .WithMany("Cases")
                        .HasForeignKey("SiteId");

                    b.HasOne("eFormSqlController.units", "Unit")
                        .WithMany()
                        .HasForeignKey("UnitId");

                    b.HasOne("eFormSqlController.workers", "Worker")
                        .WithMany()
                        .HasForeignKey("WorkerId");
                });

            modelBuilder.Entity("eFormSqlController.check_list_sites", b =>
                {
                    b.HasOne("eFormSqlController.check_lists", "CheckList")
                        .WithMany("CheckListSites")
                        .HasForeignKey("CheckListId");

                    b.HasOne("eFormSqlController.sites", "Site")
                        .WithMany("CheckListSites")
                        .HasForeignKey("SiteId");
                });

            modelBuilder.Entity("eFormSqlController.check_lists", b =>
                {
                    b.HasOne("eFormSqlController.check_lists", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("eFormSqlController.field_values", b =>
                {
                    b.HasOne("eFormSqlController.check_lists", "check_list")
                        .WithMany()
                        .HasForeignKey("check_list_id");

                    b.HasOne("eFormSqlController.fields", "field")
                        .WithMany("FieldValues")
                        .HasForeignKey("field_id");

                    b.HasOne("eFormSqlController.uploaded_data", "uploaded_data")
                        .WithMany()
                        .HasForeignKey("uploaded_data_id");

                    b.HasOne("eFormSqlController.workers", "worker")
                        .WithMany()
                        .HasForeignKey("user_id");
                });

            modelBuilder.Entity("eFormSqlController.fields", b =>
                {
                    b.HasOne("eFormSqlController.check_lists", "CheckList")
                        .WithMany("Fields")
                        .HasForeignKey("CheckListId");

                    b.HasOne("eFormSqlController.field_types", "FieldType")
                        .WithMany()
                        .HasForeignKey("FieldTypeId");

                    b.HasOne("eFormSqlController.fields", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentFieldId");
                });

            modelBuilder.Entity("eFormSqlController.folders", b =>
                {
                    b.HasOne("eFormSqlController.folders", "Parent")
                        .WithMany("Children")
                        .HasForeignKey("ParentId");
                });

            modelBuilder.Entity("eFormSqlController.language_versions", b =>
                {
                    b.HasOne("eFormSqlController.languages", "Language")
                        .WithMany()
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eFormSqlController.option_versions", b =>
                {
                    b.HasOne("eFormSqlController.options", "Option")
                        .WithMany()
                        .HasForeignKey("OptionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eFormSqlController.options", b =>
                {
                    b.HasOne("eFormSqlController.questions", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eFormSqlController.question_set_versions", b =>
                {
                    b.HasOne("eFormSqlController.question_sets", "QuestionSet")
                        .WithMany()
                        .HasForeignKey("QuestionSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eFormSqlController.question_versions", b =>
                {
                    b.HasOne("eFormSqlController.questions", "Question")
                        .WithMany()
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eFormSqlController.questions", b =>
                {
                    b.HasOne("eFormSqlController.question_sets", "QuestionSet")
                        .WithMany()
                        .HasForeignKey("QuestionSetId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eFormSqlController.site_survey_configuration_versions", b =>
                {
                    b.HasOne("eFormSqlController.site_survey_configurations", "SiteSurveyConfiguration")
                        .WithMany()
                        .HasForeignKey("SiteSurveyConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eFormSqlController.site_survey_configurations", b =>
                {
                    b.HasOne("eFormSqlController.sites", "Site")
                        .WithMany()
                        .HasForeignKey("SiteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("eFormSqlController.survey_configurations", "SurveyConfiguration")
                        .WithMany()
                        .HasForeignKey("SurveyConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eFormSqlController.site_workers", b =>
                {
                    b.HasOne("eFormSqlController.sites", "Site")
                        .WithMany("SiteWorkers")
                        .HasForeignKey("SiteId");

                    b.HasOne("eFormSqlController.workers", "Worker")
                        .WithMany("SiteWorkers")
                        .HasForeignKey("WorkerId");
                });

            modelBuilder.Entity("eFormSqlController.survey_configuration_versions", b =>
                {
                    b.HasOne("eFormSqlController.survey_configurations", "SurveyConfiguration")
                        .WithMany()
                        .HasForeignKey("SurveyConfigurationId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("eFormSqlController.taggings", b =>
                {
                    b.HasOne("eFormSqlController.check_lists", "CheckList")
                        .WithMany("Taggings")
                        .HasForeignKey("CheckListId");

                    b.HasOne("eFormSqlController.tags", "Tag")
                        .WithMany("Taggings")
                        .HasForeignKey("TagId");
                });

            modelBuilder.Entity("eFormSqlController.units", b =>
                {
                    b.HasOne("eFormSqlController.sites", "Site")
                        .WithMany("Units")
                        .HasForeignKey("SiteId");
                });
#pragma warning restore 612, 618
        }
    }
}